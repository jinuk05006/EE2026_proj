`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
//
//  FILL IN THE FOLLOWING INFORMATION:
//  STUDENT A NAME: 
//  STUDENT B NAME:
//  STUDENT C NAME: 
//  STUDENT D NAME:  
//
//////////////////////////////////////////////////////////////////////////////////


module Top_Student (inout PS2Clk, 
                    inout PS2Data,
                    input clock, 
                    input btnC, 
                    input btnL, 
                    input btnR, 
                    input [15:0] sw,
                    output [6:0]JB,
                    output [15:0] led,
                    output [6:0] seg,
                    output [3:0] an,
                    output dp
// Delete this comment and include Basys3 inputs and outputs here
);
wire clock_6p25mhz;
wire clock_45hz;
wire clock_5hz;
wire frame_begin;
wire sending_pixels;
wire sample_pixel;
wire [12:0] pixel_index;
wire [15:0] oled_data;
reg [15:0] oled_data1; //change back to reg
reg [15:0] oled_data2;
reg [12:0] x_axis;
reg [12:0] y_axis;
reg count = 0;

reg btnc_flag = 0;
reg btnr_flag = 0;
reg btnl_flag = 0;

reg left_edge = 3;
reg left_flag = 0;
reg right_edge = 93;
reg right_flag = 0;
reg position;

//mouse
wire [11:0] xpos;
wire [11:0] ypos;
wire [3:0] zpos;
wire left;
wire mid;
wire right;
wire new_event;
//paint
wire [11:0] mouse_press_x;
wire [11:0] mouse_press_y;

reg [15:0] led_status;
reg [7:0] seg_status;
reg [6:0] seg_paint;
reg [3:0] an_status;
reg dp_status;

reg [3:0] state = 0; // 0 for paint, 1,2,3,4 for subtask a,b,c,d
wire [3:0] state_out [0:4]; //4 bit 5 states
wire [7:0] JB_wire [0:4];  //8bit 5 states
wire [15:0] led_wire; //16 bit 
wire [3:0] an_wire; //4 bit 

//    change_state cs1 (clock,sw,state);

//    mode_switcher ms1 (clock, state, an_status, seg_status, oled_data1, oled_data2, an, seg, oled_data, led);

always @ ( *) begin
    if (state == 0) begin //paint
        if (state_out[0] == 4)  state <= 4;  //subtaskd
        else if (state_out[0] == 3)  state <= 3; // subtaskc
        else if (state_out[0] == 2)  state <= 2; // subtaskb
        else if (state_out[0] == 1)  state <= 1; // subtaska
        end  
        
    else if (state == 1) begin// subtaska
        if (state_out[1] == 4) state <= 4; //subtaskd
        else if (state_out[1] == 3) state <= 3; // subtaskc
        else if (state_out[1] == 2) state <= 2; // subtaskb
        else if (state_out[1] == 0) state <= 0; // paint
        end
    
    else if (state == 2) begin // subtaskb
        if (state_out[2] == 4) state <= 4; //subtaskd
        else if (state_out[2] == 3) state <= 3; // subtaskc
        else if (state_out[2] == 1) state <= 1; // subtaska
        else if (state_out[2] == 0) state <= 0; // paint
        end

    else if (state == 3) begin// subtaskc
        if (state_out[3] == 4) state <= 4; //subtaskd
        else if (state_out[3] == 2) state <= 2; // subtaskb
        else if (state_out[3] == 1) state <= 1; // subtaska
        else if (state_out[3] == 0) state <= 0; // paint
    end 

    else if (state == 4) begin // subtask d
        if (state_out[4] == 3) state <= 3; // subtaskc
        else if (state_out[4] == 2) state <= 2; // subtaskb
        else if (state_out[4] == 1) state <= 1; // subtaska
        else if (state_out[4] == 0) state <= 0; // paint
    end
end    

group_task paint1 (state,PS2Clk, PS2Data, clock, sw, JB_wire[0],led_wire ,seg , an_wire, dp, state_out[0]);

subtask_b b1 (state, clock, btnL,btnR,sw,JB_wire[2],state_out[2]);

subtask_c c1 (state, clock, btnC,sw,JB_wire[3],state_out[3]);

subtask_d box1 (state,clock, btnC, btnL, btnR, sw, JB_wire[4],state_out[4]);


    
assign JB = (state == 0) ? JB_wire[0] : 
            (state == 1) ? JB_wire[1] : 
            (state == 2) ? JB_wire[2] : 
            (state == 3) ? JB_wire[3] : 
             JB_wire[4];

assign led = (state == 0) ? led_wire : 0;

assign an = (state == 0) ? an_wire : 4'b1111;
    // Delete this comment and write your codes and instantiations here

endmodule
